数组
为什么要用数组：
计算年级300人的总分
int score1 = 88 ;
int score2 = 88 ; 
...
int score300 =98 ;
score1+...+score300 
->数组简化

int[] students = new int[300] ;
int students[] = new int[300] ;

数组的使用：数组名[下标] ->数组元素

四要素：数组名  下标 类型  数组元素
数组的类型 和 数组元素的类型一致 （兼容）
int num = 10 ;
long num = 10 ;

什么时候用数组？当多个元素类型相同，考虑用数组

数组定义：三种形式
 int[] students = new int[3] ;
 int[] students = new int[]{97,98,99}  ;
 int[] students = {97,98,99}  ; //不能拆开


数组的长度（元素的个数）:  数组名.length



有一个数列： 8	4	2	1	23	344	12
1.求所有数字的和
2. 随机产生一个 1-3 之间的数，判断数列中是否有此数
3.进行排序，并输出结果



数组的最后一个  是第  数组名.length-1

数组元素下标： 从0 -   数组名.length-1


外层i（第n趟）:	  0	1	2	3
内层j（比较次数）:4	3	2	1
i+j=4=5-1=n-1=元素个数-1




冒泡排序
nums={	2	12	4	20	1	}
冒泡流程：
第0趟： 当前 > 下一个  ，如果是：则交换
	2	4	12	1	【20】  ->一轮比较完毕，可以得到一个最大值
第1趟：
	2	4	1	【12】	
第2趟：
	2	1	【4】
第3趟：
	1	【2】

总结：
	几轮？
	元素个数->趟数
	5->4

	3->2
	2->1
	1->0
	n->n-1

	  ===>	n元素个数   ->   n-1轮
	每轮内部规则是什么？		
		if(nums[i] >nums[i+1]){   交换}

外层循环：  第一趟、第二趟、第三趟、
内层循环：
	每一趟内部的两两比较
假定有n个元素

双重循环： 外层和内存的数学关系
for(int i=0;i<n-1;i++)//  第一趟、第二趟、第三趟、
{
	for(int j=0;j<n-1-i;j++)//每一趟内部的两两比较 ，几次？
	{	
		if(nums[j] >nums[j+1]){   
			int temp = nums[j];	
			nums[j]=nums[j+1];
			nums[j+1]=temp ;
		}
	}
}



j=n-1-i


	数组长度一旦定义，则不能再改变。
	int[] nums = {23,23,1};
	int[] nums = new int[]{23,23,1};
	int[] nums = new int[3];



























