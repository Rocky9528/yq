1
VUE技术栈 ：前后端分离

Servlet:
	protected void	doGet()
	{
		PrintWriter out = response.getWriter();
		out.write("<h1>hello world</h1>") ;
	}
以前：后台代码 渲染前台代码

Servelt后台  -> 前台


前后端分离


2.Node.js ： 服务端程序

js/jquery：客户端
用户名：zs
密码：


Node.js  :可以实现类似于Spring MVC /Servlet这些服务端代码

下载安装Nodejs，一直下一步
验证：node -v

使用：
node 文件名.js

模块化编程：
将不同的功能编写到不同的文件中

--npm  :类似于Maven
		Maven处理Java
		npm处理js

jar ->maven 
js ->npm 


jquery.js    :npm 

3.npm：不需要专门的下载配置 ，node.js内置的npm

测试使用：
建立一个目录（项目） ：npm init

packsge.json  相当于pom.xml

npm ：js库

jquery

自动处理依赖：
	express ->a ->b->c-> ..-》z


下载js依赖：
	npm install express
	国内加速 淘宝镜像cnpm：
npm install -g cnpm --registry=https://registry.npm.taobao.org
之后：
	cnpm install express



npm/cnpm install express   下载到当前目录（只有当前目录可用）

npm/cnpm install express  -g 下载到整个电脑（所有目录均可用）

根据package.json自动下载js：npm install

版本号
"express": "^4.17.1"

4.17.1：指定版本
~4.17.1 ：  版本号 >= 4.17.1 , ~表示>=4.17.1 ，但是< 4.18.x ;即本次下载4.17.99
		4.17.1
		4.17.2
		..
		4.17.99
		4.18.22

^4.17.1：  版本号 >= 4.17.1 , ^表示>=4.17.1 ，但是<5.x.x,即本次下载4.19.23
		4.17.1
		4.17.2
		..
		4.17.99
		4.18.22
		4.19.23
		5.1.1


lastest：在所有范围内找最大的，5.1.1
	
		4.17.1
		4.17.2
		..
		4.17.99
		4.18.22
		4.19.23
		5.1.1

4.webpack:打包 ,可用将js等静态资源(js,css,图片) 进行压缩，从而提高性能
	下载 :
	cnpm install webpack   -g
	cnpm install webpack-cli   -g
测试：
	webpack -v

webpack本身只能给js打包，如果css,图片等其他静态资源打包，需要安装插件
cnpm install style-loader css-loader --save-dev

安装
npm install
npm install webpack -g  

如果报错，根据提示 安装缺少的依赖;
如果没有提示，尝试安装：npm install style-loader css-loader --save -dev


执行webpack 

webpack： 自动将css、js打包成一个 .dist/bound.js

index.html -> boundle.js
js,css ->boundle.js
index.html ->boundle.js  -> js /css

能否实现 修改js/css后，不打包，直接html生效： webpack-dev-server
局部安装：
npm i webpack-dev-server --save-dev
如果直接执行： webpack-dev-server ，会报错误：却是该命令。原因：能够在cmd中执行直接的命令，必须是全局命令。
全局安装npm i webpack-dev-server -g


启动：webpack-dev-server ：自动将打包后的boundle.js ->加载到内存中（boundle.js）

webpack-dev-server启动模式，会将boundle.js加载到内存中。使用时，直接在当前目录中引用<script src="bundle.js"></script>
这样好处：
	1. 热更新，css/js ->html
	2. 在内存中，因此速度快

运行：

webpack-dev-server
也可以将该命令 配置在package.json中
npm run dev


可以改修改启动时的默认文件目录：
1. 修改成  目录，而不是文件
2. 默认的文件名是index.html
	"scripts":{
		"dev" : "webpack-dev-server --contentBase src"
	},

d:/a/b/c/index.html


d:/a/b/c/  


修改 端口，以及自动启动
	"scripts":{
		"dev" : "webpack-dev-server --port 8888 --open"
	}




5.
前端工具：
hbuilder
webstorm
vscode 

	console.log(str);//cmd打印  - 调试窗口
	document.write(str);//html

print.js文件：console.log(str)  - webpack（bundle.js） - 增加了document.write(str);


a  打包  -a  b - 重新打包

6.ESMAScript6.0 
	JavaScript

JDBC标签:   ojdbc.jar   mysql-connection-j.jar  
ORM ： MyBatis   JPA  Hibernate 

1 2 3  5 6
netty :  
1 2 3 4  (5被废弃)

ESMAScript6.0 是一套规范（2015年产生）：
	javascript是ESMAScript的具体实现
	NodeJs是javascript的脚本库

NodeJs支持大部分的ESMAScript6.0 标准， 个别不支持 的需要回退5.0.
版本回退，NodeJS会通过 转换器自动搞定。

转换器：
.babelrc
{
    "presets":['es2015']
}

安装转换器：
	cnpm install babel-preset-es2015 --save-dev


安装命令行工具：
	cnpm  install babel-cli -g

使用：
	正常node xxx.js
	个别：
	如果遇到Nodejs不支持的ES6，则切换使用：babel-node xxx.js

var定义的变量，如果不存在，会自动提升（ 会将之前的局部变量，提升成全局变量
）
let:ES6 定义变量，和java等语言一样 严格控制变量的作用域

const：常量

占位符/模板字符串
console.log(`张三的年龄是：${age}`);


ES6函数默认参数值

ES6箭头函数：lambda   
	1.不需要function关键字  2.省略return   3.继承this

ES6对象初始化

解构：方便的给对象、数组赋值
var {name,age} = person ;  {...}中的变量名 就是 person的属性名

const fruit = [   'apple' ,'orange'] ;
let [one,two] = fruit ;

ES6:传播Spread Operator
数组、对象


exports  require('./hello.js')
export  import


分号 ：风格问题 

两个特殊情况 必须加：
	下一条语句是()或[]开头，则必须加; 
var num3= 10  
;["a","b","c"].forEach(function(){

})


数据类型：
基本类型
string
number
boolean
undefined ：只定义，没赋值; var a ;
null 
引用类型
Object：任何对象
Function:函数
Array：数组

判断
a.== / ===  
	  == 宽松的判断（自带类型转换）
	  ===严格的判断 （建议使用）
b.typeof：判断是否是某个类型 ，以“字符串形式”体现
c.instanceof ：判断是否某个具体类型


prototype:原型
可以向对象 增加属性 或者方法

每个函数都自带一个prorotype属性 ，默认情况下 指向一个空对象{} (称为原型对象，prototype对象)
原型对象（prototype对象） 都有一个constructor属性，它指向函数本身


person.say();//方法
 Person per = new Person();

7.约定：
	restful风格
a.参数格式
	localhost:8080/myproject?name=zs

	localhost:8080/myproject/zs ，将zs传递给后端
b.
post  ：增
delete:删
put：改
get：查


post	localhost:8080/myproject	增加（查看）
delete	localhost:8080/myproject	删除
put	localhost:8080/myproject	修改
get	localhost:8080/myproject	查看(特例：太多  Post)


get请求方式的地址栏中：
	localhost:8080/myproject?name=zs&age=23&hei=xxx&xxx...............
地址栏长度有限制  260-300 
如果请求参数太长，超过了地址栏 范围，则只能换用其他请求方式（post）
	

8.swagger
下载安装
https://swagger.io/    -》Swagger Editor
安装：package.json目录执行： npm install
如果出现以下问题：
Error: Can't find Python executable "python", you can set the PYTHON env variable
解决：
nodejs   ->python  :  1.安装Python  2.x   
		      2.安装丢失的环境即可： 
		a.管理员身份启动cmd
		b.npm install --global --production windows-build-tools

再次执行：
	 npm install


简便方式：在线版：editor.swagger.io/


下载
nginx-1.14.2.zip，解压缩A，在解压后的目录执行：start nginx.exe
测试：
localhost

--下载
swagger-ui-master.zip,解压缩B，将其中的dist目录中的全部文件，拷贝到A中的html目录中

再次访问localhost



Swagger-Editor 编辑数据
Swagger-UI 显示数据

整合步骤：
	Swagger-Editor 编辑->导出yaml ->放入nginx/html目录中 ->Swagger-UI中查找

9.Mock.js

安装
cnpm install mockjs

Mock.js语法：
一、DTD:数据模板定义规范
二、DPD：数据占位符定义规范


一、DTD
	'属性名|规则': 属性值

'persons|10' :[{
		'id':1,
		'name':'zs',
		'age':23 
	}]



'name|10' :['zs']


规则：
a.属性值是字符串类型
(1) 
	属性名|count: 字符串
(2)
	属性名|min-max: 字符串             --min-max代表次数

b.属性值是数字类型

（1）
	属性名|+1: 数字

(2)
	属性名|min-max: 数字		--min-max代表范围


c.属性值是布尔类型
（1）
	'sex|1':true    代表true出现的次数 和false 的概率是 1:1
（2）
'sex|2-4':true      代表true出现的概率 是 2/2+4


d.属性值是对象object类型

	'属性|count':{...}
	'属性|min-max':{...}



e.属性值是数组类型
'persons|3' :[{
		...}
	}]


'persons|1-6' :[{
		...}
	}]


二、DPD
	随机数据	
@date
@string
...



yaml  ->  yml

swagger写了一个yaml ->easymock 


10.easy mock
easy mock:在线Mock.js (1.内置了mock.js并且 暴露了url地址   2.同步swagger)
模拟数据：  1.mock.js 模拟数据：  当请求url时，返回mock.js模拟的数据
	    2.swagger模拟数据：根据yml中的 请求url 设置url ,返回 response中定义的数据（类型是swagger定义的，而数据是easymock模拟出来的）
	-》模拟数据，并且有查询此数据的url .   【 url ->模拟数据】


杭州大搜车


ajax - url

Base URL https://www.easy-mock.com/mock/5d088992010742640520057f/myeasymock/queryPersons

mock.js



 https://www.easy-mock.com/mock/5d088992010742640520057f/myeasymock/queryPersons


11.elementui:前端脚手架,vue组件组
很多三方组件 是基础是基于elementui进行了扩展。
举例：
vue-admin-template
根据github提示:
# 克隆项目（下载）
git clone https://github.com/PanJiaChen/vue-admin-template.git

# 进入项目目录
cd vue-admin-template

# 安装依赖
npm install

# 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题
npm install --registry=https://registry.npm.taobao.org

# 启动服务
npm run dev


--
目标：
将本地数据 复制到 easymock中一份
修改数据源：.env.development   ：VUE_APP_BASE_API


request-response

a.先查看本地有什么数据(chrome-F12,network)
Request URL(POST): http://localhost:9528/dev-api/user/login
响应
{"code":20000,"data":{"token":"admin-token"}}


Request URL(GET): http://localhost:9528/dev-api/user/info   （注意不要加?token=admin-token）
{"websocket":true,"origins":["*:*"],"cookie_needed":false,"entropy":187458990}
响应
{"code":20000,"data":{"roles":["admin"],"introduction":"I am a super administrator","avatar":"https://wpimg.wallstcn.com/f778738c-e4f8-4870-b634-56703b4acafe.gif","name":"Super Admin"}}


b.复制到easy mock

https://www.easy-mock.com/mock/5d088992010742640520057f/myeasymock    /user/login


12.

router:路由器

views:视图

api：调用接口


-------*******------------
请求xxx -> router("xxx") -> views ( <template> html搭建 ,<script>js)->调用（api）->url(参数) -> Easy Mock[swagger(yml，类型+变量名，String id)  + mock.js(DPD  @string)]  )
		
a				x
b				y
c				z
d				q



后台开发：

请求xxx->@RequestMapping("xxx") ->service ->dao ->db    动态从数据库中查


请求xxx->@RequestMapping("xxx") ->service :return "abc"  硬编码


===

.vue/.js模块化编程：
import
..
export

请求地址：(需要与easy mock的url保持一致)
	url: '/yq/activity',
        method: 'get'


Controller->service->dao

--
分页

jsp->servlet->service->dao


url:/yq/activity/queryActivitiesByPage/{currentPage}/{pageSize}
数据的形式：
response.data.total :总数据量
response.data.rows:每页的数据量



function add(a,b)
{
	return a+b ;
}

add(1,2)


--
查询时：
 参数：object
 返回：object


public List<Student> querys(Student student){//name :zs  ,age 23 ->Student student

	....
	List<Student> students = ...;
	return students ;

}

List<Student>: Student



查询对象：activitiesData


绑定数据：v-model

--
弹窗逻辑：
dialogTableVisible默认false，不显示，隐藏
单击，则改为true，显示
 @click="dialogTableVisible = true"


后台：easy mock

====
修改： 1.查询+2.修改

1  zs  23

"1" -> 1  ls  24 ->保存

新增：
dialogFormVisible = true
修改
dialogFormVisible = true ;

新增、修改 共享同一个对话框。因此 新增时，可以拿到修改的数据。


删除

13.生命周期函数
handleAvatarSuccess
beforeAvatarUpload


图片的url地址保存在变量imageUrl
acitivityData:  id,name,start  end,url


--nuxt：服务端渲染技术

ajax ->服务端->ajax 

服务端->客户端


服务端渲染优势：SEO ,提高网站的搜索排名  ，   爬虫 ：特点，不认识js

下载nuxt的模板代码starter-template


npm install
修改package.json  中{{name}}
npm run dev 
运行
localhost:3000

用vscode打开项目

<nuxt/> ：布局的中间部分

目录：
pages：页面
layout:布局


映射时，默认的文件名：index.vue

映射目录“/”：代表的 pages目录


<router-link to="/userinfo">
有两种可能：
1.  
pages/userinfo/index.vue
2.
pages/userinfo.vue


axios渲染:
cnpm  install axios --save

异步：
	老板：小王


动态路由：根据id查询

参数名：_后面的 文件名   _id.vue


--分享 share.js
social-share.min.js
share.min.css

https://github.com/overtrue/share.js使用方法

1引入。
https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/js/social-share.min.js
https://cdnjs.cloudflare.com/ajax/libs/social-share.js/1.0.16/css/share.min.css

2.编写DIV

 <div class="social-share" ></div>

3.完整性

https://blog.csdn.net/liwenfei123/article/details/78952337

data-title 
data-description    
data-sites  ：['qzone', 'qq', 'weibo','wechat', 'douban']         
data-url                 
data-xxx


颜群老师微信157468995













